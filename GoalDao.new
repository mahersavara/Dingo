package io.sukhuat.dingo.data.local

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import io.sukhuat.dingo.data.model.GoalEntity
import kotlinx.coroutines.flow.Flow

/**
 * Data Access Object for the goals table
 */
@Dao
interface GoalDao {
    /**
     * Get all goals
     */
    @Query("SELECT * FROM goals")
    fun getAllGoals(): Flow<List<GoalEntity>>
    
    /**
     * Get goals with a specific status
     */
    @Query("SELECT * FROM goals WHERE status = :status")
    fun getGoalsByStatus(status: String): Flow<List<GoalEntity>>
    
    /**
     * Get a specific goal by ID
     */
    @Query("SELECT * FROM goals WHERE id = :id")
    fun getGoalById(id: String): Flow<GoalEntity?>
    
    /**
     * Insert a new goal
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertGoal(goal: GoalEntity)
    
    /**
     * Update an existing goal
     */
    @Update
    suspend fun updateGoal(goal: GoalEntity): Int
    
    /**
     * Update the status of a goal
     */
    @Query("UPDATE goals SET status = :status WHERE id = :id")
    suspend fun updateGoalStatus(id: String, status: String): Int
    
    /**
     * Update the text of a goal
     */
    @Query("UPDATE goals SET text = :text WHERE id = :id")
    suspend fun updateGoalText(id: String, text: String): Int
    
    /**
     * Update the custom image of a goal
     */
    @Query("UPDATE goals SET customImage = :customImage WHERE id = :id")
    suspend fun updateGoalImage(id: String, customImage: String?): Int
    
    /**
     * Update the image URL of a goal
     */
    @Query("UPDATE goals SET imageUrl = :imageUrl WHERE id = :id")
    suspend fun updateGoalImageUrl(id: String, imageUrl: String?): Int
    
    /**
     * Delete a goal
     */
    @Query("DELETE FROM goals WHERE id = :id")
    suspend fun deleteGoal(id: String): Int
    
    /**
     * Update the position of a goal
     */
    @Query("UPDATE goals SET position = :position WHERE id = :id")
    suspend fun updateGoalPosition(id: String, position: Int): Int
    
    /**
     * Clear all goals from the database
     * Used when a user logs out
     */
    @Query("DELETE FROM goals")
    suspend fun clearAllGoals()
} 
